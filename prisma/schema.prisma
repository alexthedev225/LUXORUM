generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
  previewFeatures = ["driverAdapters"]

}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")

}

enum Role {
  USER
  ADMIN
  MANAGER  // Nouveau rôle intermédiaire
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id              String      @id @default(cuid())
  email           String      @unique
  username        String      @unique
  password        String
  role            Role        @default(USER)
  permissions     String[]    @default([])  // Permissions spécifiques
  firstName       String?
  lastName        String?
  profileImage    String?
  addresses       Address[]
  orders          Order[]
  cart            Cart?
  stockUpdates    StockHistory[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Product {
  id              String        @id @default(cuid())
  name            String
  description     String
  price           Decimal       @db.Decimal(10, 2)
  stock           Int
  images          String[]      // Stocke uniquement les chemins des images
  category        Category      @relation(fields: [categoryId], references: [id])
  categoryId      String
  specifications  Json?
  discount        Decimal?      @db.Decimal(4, 2)
  cartItems       CartItem[]
  orderItems      OrderItem[]
  stockHistory    StockHistory[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String   @id @default(cuid())
  cart      Cart     @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id            String      @id @default(cuid())
  user          User        @relation(fields: [userId], references: [id])
  userId        String
  items         OrderItem[]
  status        OrderStatus @default(PENDING)
  total         Decimal     @db.Decimal(10, 2)
  address       Address     @relation(fields: [addressId], references: [id])
  addressId     String
  paymentIntent String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id        String   @id @default(cuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  isDefault   Boolean  @default(false)
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StockHistory {
  id            String   @id @default(cuid())
  product       Product  @relation(fields: [productId], references: [id])
  productId     String
  previousStock Int
  newStock      Int
  updatedBy     User     @relation(fields: [userId], references: [id])
  userId        String
  createdAt     DateTime @default(now())
}
